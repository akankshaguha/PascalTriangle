

object queryandtransformation  {
  
 def contains(s: Set, elem: Int): Boolean = s(elem)
 type Set = Int => Boolean
 def singletonSet(elem: Int): Set = (_==elem)
  
 val bound=10
    def forall(s: Set, p: Int => Boolean): Boolean = {
        
    def iter(a: Int): Boolean = {
      if (a > bound) true
      else if (contains(s, a)) p(a) && iter(a + 1)
      else iter(a + 1)
    }
    iter(-bound)
  }
  def exists(s: Set, p: Int => Boolean): Boolean = !forall(s, (x => !p(x)))
 
 
def map(s: Set, f: Int => Int): Set = (e:Int) => exists(s, (x => f(x) == e))

 def main(args:Array[String]){
  print(contains(Set(1),1)) 
  print(singletonSet(3))
  
 }

}